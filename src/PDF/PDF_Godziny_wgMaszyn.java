package PDF;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class PDF_Godziny_wgMaszyn {
	
	static Connection connection= WB.Connection2DB.dbConnector();
	
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
	        Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
	        Font.NORMAL, BaseColor.RED);
	private static Font smallFont = new Font(Font.FontFamily.TIMES_ROMAN, 8,
	        Font.NORMAL);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
	        Font.BOLD);
	
	public static void Machines (String start, String end) throws SQLException, FileNotFoundException, DocumentException{
		
		Document doc = new Document();
		SimpleDateFormat doNazwy = new SimpleDateFormat("yyyy.MM.dd");
		SimpleDateFormat godz = new SimpleDateFormat("HH;mm");
		Calendar date = Calendar.getInstance();
		String path = Parameters.getPathToSaveHours()+"/"+doNazwy.format(date.getTime())+"/";
		
		File theDir = new File(path);
		// if the directory does not exist, create it
		if (!theDir.exists()) {
		    try{
		        theDir.mkdir();
		    } 
		    catch(SecurityException se){
		        //handle it
		    }
		}	
		
		String name = "Raport maszyn od "+start+" do "+end+".pdf";
		File f = new File(path+name);
		if(f.exists() && !f.isDirectory())
			name = godz.format(date.getTime())+" "+name;
		PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(path+name));
		doc.open();
		writer.setPageEvent(new PDF_MyFooter());
		
		//wybierz wszystkie gniazda
		String sql1 = "SELECT nest, cfnestoms from werkpost where nest like 'W%' group by nest, cfnestoms order by nest";
		Statement st1 = connection.createStatement();
		ResultSet rs1 = st1.executeQuery(sql1);
		while(rs1.next()){
			String nest = rs1.getString("nest");
			
			//Zrobienie naglowka
			
			 Paragraph preface = new Paragraph();
             // We add one empty line
			 preface.add("\n");
             // Lets write a big header
             preface.add(new Paragraph("Raport godzin wg maszyn", catFont));

             preface.add("\n");
             // Will create: Report generated by: _name, _date
             preface.add(new Paragraph("Od: "+start+" do:  "+end, smallBold));
             preface.add("\n");
             preface.add(new Paragraph(
                             "Gniazdo:  "+nest+"  "+rs1.getString("cfnestoms"),
                             smallBold));

             preface.add("\n");
             doc.add(preface);
             int ileMaszyn=0;
             PdfPTable tabPDF = new PdfPTable(8);
             float widths[] = new float[] { 20, 15, 10, 10, 15, 10, 15, 10};
             tabPDF = addHeader(tabPDF);
			
		//  ilosc maszyn w okreœlonym przedziale czasowym
			String a = "select count(*) from (select werkpost from Rejestracja where datum >= '"+start+"' and datum <= '"+end+"' and GniazdoS = '"+nest+"' and verwerkt = 1 group by werkpost) M";
			Statement a1 = connection.createStatement();
			ResultSet rs2 = a1.executeQuery(a);
			while(rs2.next()){
				ileMaszyn= rs2.getInt(1);
			}
			a1.close();
			System.out.println(ileMaszyn);
			String b = null;

			int p = 0;
			b = "select werkpost, cfwerkpostoms from Rejestracja where datum >= '"+start+"' and datum <= '"+end+"' and GniazdoS = '"+nest+"' and verwerkt = 1 group by werkpost";
			Statement b1 = connection.createStatement();
			ResultSet rs3 = b1.executeQuery(b);
			
			
			//DLA KAZDEJ MASZYNY
			while(rs3.next()){
				String stanowisko = rs3.getString(1);
				String nazwa = rs3.getString(2);
				String []obrobka = new String [3];
				String []poprawki = new String [2];
				String awarie = "";
				obrobka = liczObrobke(start, end, stanowisko);
				poprawki = liczPoprawki(start, end, stanowisko);
				awarie = liczAwarie(start, end, stanowisko);
				
				tabPDF = addRow(tabPDF, stanowisko, nazwa, obrobka, poprawki, awarie);
			}
			tabPDF.setWidths(widths);
			tabPDF.setHeaderRows(2);
			tabPDF.setWidthPercentage(100);
			tabPDF.setHorizontalAlignment(Element.ALIGN_CENTER);
			tabPDF.setHorizontalAlignment(Element.ALIGN_CENTER);
			doc.add(tabPDF);
			doc.newPage();
			
			
		}
		doc.close();
		
	}

	private static String liczAwarie(String start, String end, String stanowisko) throws SQLException {
		// TODO Auto-generated method stub
		String AWARIE = "";
		String sql2 = "select werkbon, sum(tijd), status from Rejestracja where datum >= '"+start+"' and datum <= '"+end+"' and werkpost = '"+stanowisko+"' and verwerkt = 1 and cfartikelcode like 'AWARI%' group by werkbon ";
		Statement stm1 = connection.createStatement();
		ResultSet rs4 = stm1.executeQuery(sql2);
		int MinutWykonano = 0;
		while(rs4.next()){
			MinutWykonano += rs4.getInt("SUM(TIJD)");
		}
		rs4.close();
		if(MinutWykonano/60 <10) AWARIE = "0";
		if(MinutWykonano%60>=10)
			AWARIE += Integer.toString(MinutWykonano/60)+":"+Integer.toString(MinutWykonano%60);
		else
			AWARIE += Integer.toString(MinutWykonano/60)+":0"+Integer.toString(MinutWykonano%60);
		
		return AWARIE;
	}

	private static String[] liczPoprawki(String start, String end, String stanowisko) throws SQLException {
		// TODO Auto-generated method stub
		String [] poprawki = new String [2];
		poprawki[0] = "";
		String sql2 = "select werkbon, sum(tijd), status from Rejestracja where datum >= '"+start+"' and datum <= '"+end+"' and werkpost = '"+stanowisko+"' and verwerkt = 1 and cfartikelcode = 'POPRAWKI' and cfnaam  NOT like 'NAREGOWSKA%' group by werkbon ";
		Statement stm1 = connection.createStatement();
		ResultSet rs4 = stm1.executeQuery(sql2);
		int MinutWykonano = 0;
		while(rs4.next()){
			MinutWykonano += rs4.getInt("SUM(TIJD)");
		}
		rs4.close();
		if(MinutWykonano<0){
			poprawki[0] = "-";
			MinutWykonano = MinutWykonano*(-1);
		}
		if(MinutWykonano/60 < 10) poprawki[0]+="0";
		if(MinutWykonano%60>=10)
			poprawki[0] += Integer.toString(MinutWykonano/60)+":"+Integer.toString(MinutWykonano%60);
		else
			poprawki[0] += Integer.toString(MinutWykonano/60)+":0"+Integer.toString(MinutWykonano%60);
		
		String sql3 = "select cfnaam from Rejestracja where datum >= '"+start+"' and datum <= '"+end+"' and werkpost = '"+stanowisko+"' and verwerkt = 1 and cfartikelcode = 'POPRAWKI' and cfnaam  NOT like 'NAREGOWSKA%' group by cfnaam ";
		Statement stm5 = connection.createStatement();
		ResultSet rs7 = stm5.executeQuery(sql3);
		String pracownicy = "";
		while(rs7.next()){
			pracownicy+= rs7.getString(1)+", ";
		}
		rs7.close();
		stm5.close();
		if(!pracownicy.equals("")){
			pracownicy = pracownicy.substring(0, pracownicy.length()-2);
		}
		poprawki[1] = pracownicy;
		
		return poprawki;
	}

	private static String[] liczObrobke(String start, String end, String stanowisko) throws SQLException {
		// TODO Auto-generated method stub
		
		String []obrobka = new String [3];
		String sql2 = "select werkbon, sum(tijd), status from Rejestracja where datum >= '"+start+"' and datum <= '"+end+"' and werkpost = '"+stanowisko+"' and verwerkt = 1 and cfartikelcode <> 'POPRAWKI' and cfartikelcode <> 'AWARIA' and cfnaam  NOT like 'NAREGOWSKA%' group by werkbon ";
		Statement stm1 = connection.createStatement();
		ResultSet rs4 = stm1.executeQuery(sql2);
		int MinutWykonano = 0;
		int ileMinutTeoret = 0;
		while(rs4.next()){
			//int GodzinDlaBonu = rs4.getInt(4);
			int MinutDlaBonu = rs4.getInt("SUM(TIJD)");
			MinutWykonano += MinutDlaBonu;
			String numerBonu = rs4.getString("werkbon");
			
			//wyszukanie czasu teoretycznego 
			String sql4 = "select hoeveelheid, instelminuten, werkminuten, status from werkbon where werkbonnummer = '"+numerBonu+"'";           
			Statement stm3 = connection.createStatement();
			//int ileHTeoria= 0;
			int ileMinTeoria = 0;
			int ileSztuk = 0;
			String status = rs4.getString("status");
			ResultSet rs5 = stm3.executeQuery(sql4);
			while(rs5.next()){
				ileSztuk = rs5.getInt(1);
				ileMinTeoria = rs5.getInt(2) + (rs5.getInt(3)*ileSztuk);
			}
			stm3.close();
		
			if(status.equals("90")){
				String sql10 = "select sum(tijd) from Rejestracja where ((datum < '"+start+"' and werkbon = '"+numerBonu+"') or (datum >= '"+start+"' and datum <= '"+end+"' and werkbon = '"+numerBonu+"')) and verwerkt = 1";
				Statement stm4 = connection.createStatement();
				ResultSet rs6 = stm4.executeQuery(sql10);
				int minOdejmij = 0;
				while(rs6.next()){
					minOdejmij = rs6.getInt(1);
				}
				stm4.close();
				ileMinTeoria -= minOdejmij;
				ileMinutTeoret += ileMinTeoria;
			}
			else if(status.equals("20")){
				ileMinutTeoret += MinutDlaBonu;
			}				
		}
		stm1.close();
		obrobka[0] = "";
		if(MinutWykonano/60<9) obrobka[0]+="0";
		if(MinutWykonano%60>=10)
			obrobka[0] = Integer.toString(MinutWykonano/60)+":"+Integer.toString(MinutWykonano%60);
		else
			obrobka[0] = Integer.toString(MinutWykonano/60)+":0"+Integer.toString(MinutWykonano%60);
		obrobka[1] = "";
		if(ileMinutTeoret<0){
			obrobka[1] = "-";
			ileMinutTeoret = ileMinutTeoret*(-1);
		}
		if(ileMinutTeoret/60<9) obrobka[1]+="0";
		if(ileMinutTeoret%60>=10)
			obrobka[1] += Integer.toString(ileMinutTeoret/60)+":"+Integer.toString(ileMinutTeoret%60);
		else
			obrobka[1] += Integer.toString(ileMinutTeoret/60)+":0"+Integer.toString(ileMinutTeoret%60);
		
		String sql3 = "select cfnaam from Rejestracja where datum >= '"+start+"' and datum <= '"+end+"' and werkpost = '"+stanowisko+"' and verwerkt = 1 and cfartikelcode <> 'POPRAWKI' and cfnaam  NOT like 'NAREGOWSKA%' group by cfnaam ";
		Statement stm5 = connection.createStatement();
		ResultSet rs7 = stm5.executeQuery(sql3);
		String pracownicy = "";
		while(rs7.next()){
			pracownicy+= rs7.getString(1)+", ";
		}
		rs7.close();
		stm5.close();
		if(!pracownicy.equals("")){
			pracownicy = pracownicy.substring(0, pracownicy.length()-2);
		}
		obrobka[2] = pracownicy;
		return obrobka;
	}

	private static PdfPTable addRow(PdfPTable tabPDF, String stanowisko, String nazwa, String[] obrobka,
			String[] poprawki, String awarie) {
		// TODO Auto-generated method stub
		
		PdfPCell cell1 = new PdfPCell(new Phrase(stanowisko, smallFont));
		cell1.setMinimumHeight(30f);
		cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
		tabPDF.addCell(cell1);
		
		PdfPCell cell2 = new PdfPCell(new Phrase(nazwa, smallFont));
		cell2.setMinimumHeight(30f);
		cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);
		tabPDF.addCell(cell2);
		
		PdfPCell cell3 = new PdfPCell(new Phrase(obrobka[0], smallFont));
		cell3.setMinimumHeight(30f);
		cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);
		tabPDF.addCell(cell3);
		
		PdfPCell cell4 = new PdfPCell(new Phrase(obrobka[1], smallFont));
		cell4.setMinimumHeight(30f);
		cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell4.setVerticalAlignment(Element.ALIGN_MIDDLE);
		tabPDF.addCell(cell4);
		
		PdfPCell cell5 = new PdfPCell(new Phrase(obrobka[2], smallFont));
		cell5.setMinimumHeight(30f);
		cell5.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell5.setVerticalAlignment(Element.ALIGN_MIDDLE);
		tabPDF.addCell(cell5);
		
		PdfPCell cell6 = new PdfPCell(new Phrase(poprawki[0], smallFont));
		cell6.setMinimumHeight(30f);
		cell6.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell6.setVerticalAlignment(Element.ALIGN_MIDDLE);
		tabPDF.addCell(cell6);
		
		PdfPCell cell7 = new PdfPCell(new Phrase(poprawki[1], smallFont));
		cell7.setMinimumHeight(30f);
		cell7.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell7.setVerticalAlignment(Element.ALIGN_MIDDLE);
		tabPDF.addCell(cell7);
		
		PdfPCell cell8 = new PdfPCell(new Phrase(awarie, smallFont));
		cell8.setMinimumHeight(30f);
		cell8.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell8.setVerticalAlignment(Element.ALIGN_MIDDLE);
		tabPDF.addCell(cell8);
		
		return tabPDF;
	}

	private static PdfPTable addHeader(PdfPTable t) {
		// TODO Auto-generated method stub
		PdfPCell cell1 = new PdfPCell(new Phrase("Maszyna", smallBold));
		cell1.setRowspan(2);
		cell1.setBackgroundColor(BaseColor.ORANGE);
		cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell1.setVerticalAlignment(Element.ALIGN_MIDDLE);
		cell1.setFixedHeight(30f);
		t.addCell(cell1);
		
		PdfPCell cell2 = new PdfPCell(new Phrase("Nazwa", smallBold));
		cell2.setRowspan(2);
		cell2.setFixedHeight(30f);
		cell2.setBackgroundColor(BaseColor.ORANGE);
		cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell2.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell2);
		
		PdfPCell cell3 = new PdfPCell(new Phrase("Obróbka", smallBold));
		cell3.setMinimumHeight(15f);
		cell3.setColspan(3);
		cell3.setBackgroundColor(BaseColor.ORANGE);
		cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell3.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell3);
		
		PdfPCell cell4 = new PdfPCell(new Phrase("Poprawki", smallBold));
		cell4.setMinimumHeight(15f);
		cell4.setColspan(2);
		cell4.setBackgroundColor(BaseColor.ORANGE);
		cell4.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell4.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell4);
		
		PdfPCell cell6 = new PdfPCell(new Phrase("Awarie", smallBold));
		cell6.setFixedHeight(30f);
		cell6.setRowspan(2);
		cell6.setBackgroundColor(BaseColor.ORANGE);
		cell6.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell6.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell6);
		
		PdfPCell cell7 = new PdfPCell(new Phrase("Zarejest", smallBold));
		cell7.setMinimumHeight(15f);
		cell7.setBackgroundColor(BaseColor.ORANGE);
		cell7.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell7.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell7);
		
		PdfPCell cell8 = new PdfPCell(new Phrase("Teor", smallBold));
		cell8.setMinimumHeight(15f);
		cell8.setBackgroundColor(BaseColor.ORANGE);
		cell8.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell8.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell8);
		
		PdfPCell cell9 = new PdfPCell(new Phrase("Pracownik", smallBold));
		cell9.setMinimumHeight(15f);
		cell9.setBackgroundColor(BaseColor.ORANGE);
		cell9.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell9.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell9);
		
		PdfPCell cell10 = new PdfPCell(new Phrase("Zarejest", smallBold));
		cell10.setMinimumHeight(15f);
		cell10.setBackgroundColor(BaseColor.ORANGE);
		cell10.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell10.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell10);
		
		PdfPCell cell11 = new PdfPCell(new Phrase("Pracownik", smallBold));
		cell11.setMinimumHeight(15f);
		cell11.setBackgroundColor(BaseColor.ORANGE);
		cell11.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell11.setVerticalAlignment(Element.ALIGN_MIDDLE);
		t.addCell(cell11);
		
		return t;
		
	}
}